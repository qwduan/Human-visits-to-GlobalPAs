library(terra); library(dplyr); library(readr); library(tidyr); library(stringr); library(countrycode); library(forcats)
library(mgcv); library(progressr); library(future); library(future.apply); library(ggplot2); library(sf)

ssp_base <- "xxx/origindata/SSP_pop/SSP"
ssp_versions <- c("ssp1", "ssp2", "ssp3", "ssp4", "ssp5")
ssp_paths <- lapply(ssp_versions, function(s) list(
  future = file.path(ssp_base, paste0(s, "_total_2100.tif")),
  base = file.path(ssp_base, paste0(s, "_total_2020.tif"))
))
names(ssp_paths) <- ssp_versions


base_dir <- "xxx"
activity_dir <- file.path(base_dir, "output/visit/mean_update")
output_dir <- file.path(base_dir, "output/visit/ssp_change_update")
dir.create(output_dir, showWarnings = FALSE)
urbandata_dir <- file.path(base_dir, "output/visit/urban_proportion_update")
pop_dir <- file.path(base_dir, "output/visit/home_fra_update")

countries <- list.files(activity_dir, pattern = "activity_.*.csv") %>%
  str_replace_all("activity_|.csv", "")


process_country_ssp <- function(country) {
  iso <- tolower(countrycode(country, "country.name", "iso3c"))
  df <- read_csv(file.path(activity_dir, paste0("activity_", country, ".csv")))
  if (nrow(df) == 0) return(NULL)
  
  home_coords <- df %>%
    distinct(home_latitude, home_longitude) %>%
    rename(lat = home_latitude, lon = home_longitude) %>%
    filter(!is.na(lat) & !is.na(lon))
  
  res <- 0.05
  ext_area <- ext(
    min(home_coords$lon) - 5 * res / 2,
    max(home_coords$lon) + 5 * res / 2,
    min(home_coords$lat) - 5 * res / 2,
    max(home_coords$lat) + 5 * res / 2
  )
  
  actrast <- rast(
    xmin = ext_area[1], xmax = ext_area[2],
    ymin = ext_area[3], ymax = ext_area[4],
    resolution = c(res, res),
    crs = "EPSG:4326"
  )
  values(actrast) <- 1
  
  prop_path <- file.path(urbandata_dir, paste0("smod_", country, ".csv"))
  
  if (!file.exists(prop_path)) return(NULL)
  
  proportion_results <- read_csv(prop_path)
  
  smod <- proportion_results  %>%
    group_by(lon, lat) %>%
    arrange(desc(proportion)) %>%  
    filter(!(row_number() == 1 & value == 10)) %>%  
    dplyr::slice(1) %>% 
    ungroup()
  smod <- smod %>% dplyr::select(value, lon, lat)
  smod <- smod %>%
    mutate(
      urban = case_when(
        value %in% c(11, 12, 13) ~ 1,
        value %in% c(21, 22, 23) ~ 2,
        value == 30 ~ 3,
        TRUE ~ NA_real_
      )
    )
  home_coords <- home_coords %>%
    left_join(smod, by = c("lat", "lon")) %>%
    mutate(
      value = replace_na(value, 10),
      urban = replace_na(urban, 1)
    )
  
  ssp_results <- lapply(names(ssp_paths), function(ssp) {
    base_pop <- rast(ssp_paths[[ssp]]$base)
    future_pop <- rast(ssp_paths[[ssp]]$future)
    
    base_ext <- resample(extend(base_pop, ext_area), actrast, method = "sum")
    future_ext <- resample(extend(future_pop, ext_area), actrast, method = "sum")
    
    coords_sf <- vect(home_coords, geom = c("lon", "lat"), crs = "EPSG:4326")
    base_vals <- terra::extract(base_ext, coords_sf)[,2]
    future_vals <- terra::extract(future_ext, coords_sf)[,2]
    
    scaling_df <- home_coords %>%
      mutate(ssp_base = base_vals, ssp_future = future_vals) %>%
      mutate(scaling_factor = ifelse(ssp_base > 0, ssp_future / ssp_base, 1)) %>%
      mutate(scenario = ssp, country = country)
    
    return(scaling_df)
  })
  
  ssp_scaling_combined <- bind_rows(ssp_results)
  write_csv(ssp_scaling_combined, file.path(output_dir, paste0("ssp_scaling_", country, ".csv")))
  return(ssp_scaling_combined)
}

lapply(countries, process_country_ssp)



process_country_ssp <- function(country) {
  iso <- tolower(countrycode(country, "country.name", "iso3c"))
  
  # Read activity data
  df <- read_csv(file.path(activity_dir, paste0("activity_", country, ".csv")))
  if (nrow(df) == 0) return(NULL)
  
  home_df <- read_csv(file.path(pop_dir, paste0("home_", country, ".csv")))
  if (nrow(df) == 0) return(NULL)
  
  
  df <- df %>%
    left_join(home_df, by = c("home_latitude" = "lat", "home_longitude" = "lon"))
  
  
  
  # Read scale factors
  ssp_file <- file.path(output_dir, paste0("ssp_scaling_", country, ".csv"))
  if (!file.exists(ssp_file)) return(NULL)
  scale_factors_all <- read_csv(ssp_file)
  
  results <- list()
  
  for (ssp in unique(scale_factors_all$scenario)) {
    scale_factors <- scale_factors_all %>%
      filter(scenario == ssp) %>%
      select(lat, lon, scaling_factor)
    
    # Join scale factor
    df_scaled <- df %>%
      left_join(scale_factors, by = c("home_latitude" = "lat", "home_longitude" = "lon")) %>%
      mutate(
        scaled_pop = pop * scaling_factor,
        act_time = visit_fraction * scaled_pop
      )
    
    
    visit_sum <- df_scaled %>%
      group_by(visit_latitude, visit_longitude, urban) %>%
      summarise(visit_time = sum(act_time, na.rm = TRUE), .groups = "drop") %>%
      group_by(visit_latitude, visit_longitude) %>%
      mutate(
        sum_visit_time = sum(visit_time, na.rm = TRUE),
        fraction_visit_time = visit_time / sum_visit_time
      ) %>%
      ungroup() %>%
      mutate(country = country, scenario = ssp)
    
    results[[ssp]] <- visit_sum
  }
  
  return(results)
}

all_country_results <- lapply(countries, process_country_ssp)


visit_intensity_all <- all_country_results %>%
  purrr::compact() %>%   
  purrr::map_dfr(bind_rows)

write.csv(visit_intensity_all, "xxx/output/visit/v4/ssps_all.csv")


scale_directory <- "xxx/output/visit/ssp_change_update"
scale_files <- list.files(scale_directory, pattern = "\\.csv$", full.names = TRUE)

scale_df <- scale_files %>%
  lapply(read_csv) %>%
  bind_rows()

#Clean base and future pop
pop_summary <- scale_df %>%
  filter(!is.na(ssp_base), !is.na(scaling_factor)) %>%
  mutate(
    base_pop = ssp_base,
    future_pop = ssp_future
  ) %>%
  group_by(country, scenario, urban) %>%
  summarise(
    base_pop = sum(base_pop, na.rm = TRUE),
    future_pop = sum(future_pop, na.rm = TRUE),
    .groups = "drop"
  )

#Assign readable urban class labels
pop_summary <- pop_summary %>%
  mutate(
    urban_class = case_when(
      urban == 1 ~ "rural",
      urban == 2 ~ "suburban",
      urban == 3 ~ "urban"
    )
  )

#Compute total base and future pop by country + scenario
base_totals <- pop_summary %>%
  group_by(country) %>%
  summarise(base_total = sum(base_pop, na.rm = TRUE), .groups = "drop")

future_totals <- pop_summary %>%
  group_by(country, scenario) %>%
  summarise(future_total = sum(future_pop, na.rm = TRUE), .groups = "drop")

# Compute base urban proportions (across all scenarios, base stays the same)
base_shares <- pop_summary %>%
  group_by(country, urban_class) %>%
  summarise(base_pop = sum(base_pop, na.rm = TRUE), .groups = "drop") %>%
  left_join(base_totals, by = "country") %>%
  mutate(base_share = base_pop / base_total) %>%
  select(country, urban_class, base_share) %>%
  pivot_wider(
    names_from = urban_class,
    values_from = base_share,
    names_glue = "base_{urban_class}_share"
  )

#Compute future shares for each SSP + urban class
future_shares <- pop_summary %>%
  group_by(country, scenario, urban_class) %>%
  summarise(future_pop = sum(future_pop, na.rm = TRUE), .groups = "drop") %>%
  left_join(future_totals, by = c("country", "scenario")) %>%
  mutate(future_share = future_pop / future_total) %>%
  select(country, scenario, urban_class, future_share) %>%
  pivot_wider(
    names_from = c(scenario, urban_class),
    values_from = future_share,
    names_glue = "{scenario}_{urban_class}_share"
  )

#Join base and future shares
final_result <- base_shares %>%
  left_join(future_shares, by = "country")

#Add proportion change for each class and SSP
for (ssp in c("ssp1", "ssp2", "ssp3", "ssp4", "ssp5")) {
  for (cls in c("urban", "suburban", "rural")) {
    change_col <- paste0(ssp, "_", cls, "_prop_change")
    future_col <- paste0(ssp, "_", cls, "_share")
    base_col <- paste0("base_", cls, "_share")
    
    final_result[[change_col]] <- final_result[[future_col]] - final_result[[base_col]]
  }
}



final_result$iso3 <- countrycode(final_result$country, origin = "country.name", destination = "iso3c")

#install.packages("WDI")
library(WDI)
# Get country income levels from the World Bank
income<- WDI(indicator = "NY.GDP.PCAP.CD", extra = TRUE)

country_income <- income %>% 
  filter(year == '2024')%>%
  dplyr::select(income, iso3c)
country_income$income[country_income$iso3c == "CZE"] <- "High income"
country_income$income[country_income$iso3c == "GUF"] <- "High income"
country_income$income[country_income$iso3c == 'VNM'] <- 'Lower middle income'

final_result <- final_result %>%
  left_join(country_income, by = c('iso3'='iso3c'))
final_result$income <- factor(final_result$income, levels = c("High income", "Upper middle income", 
                                          "Lower middle income", "Low income"))


income_urbanisation <- final_result %>%
  filter(!is.na(income))%>%
  select(income, ends_with("_prop_change")) %>%
  group_by(income) %>%
  summarise(across(everything(), mean, na.rm = TRUE), .groups = "drop")

urban_long <- income_urbanisation %>%
  pivot_longer(
    cols = -income,
    names_to = "var",
    values_to = "prop_change"
  ) %>%
  separate(var, into = c("scenario", "urban_class", "drop"), sep = "_", extra = "merge", fill = "right") %>%
  select(-drop)

urban_long <- urban_long %>%
  mutate(ssp_income = paste(scenario, income, sep = " - "))

library(forcats)

urban_long$ssp_income <- factor(
  urban_long$ssp_income,
  levels = c(
    "ssp1 - High income", "ssp1 - Upper middle income", "ssp1 - Lower middle income", "ssp1 - Low income",
    "ssp2 - High income", "ssp2 - Upper middle income", "ssp2 - Lower middle income", "ssp2 - Low income",
    "ssp3 - High income", "ssp3 - Upper middle income", "ssp3 - Lower middle income", "ssp3 - Low income",
    "ssp4 - High income", "ssp4 - Upper middle income", "ssp4 - Lower middle income", "ssp4 - Low income",
    "ssp5 - High income", "ssp5 - Upper middle income", "ssp5 - Lower middle income", "ssp5 - Low income"
  )
)
urban_long$ssp_income <- fct_rev(urban_long$ssp_income)

ggplot(urban_long, aes(x = ssp_income, y = prop_change, fill = urban_class)) +
  geom_col(position = "dodge", width = 0.7) +
  scale_fill_manual(values = c(
    "rural" = "#66bd63",
    "suburban" = "#fee08b",
    "urban" = "#ffa652"
  )) +
  labs(
    title = "Urbanisation Proportion Change by SSP and Income Level",
    x = "SSP - Income", y = "Proportion Change",
    fill = "Urban Class"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top"
  )



###################################

income <- WDI(indicator = "NY.GDP.PCAP.CD", extra = TRUE) %>%
  filter(year == 2024) %>%
  select(income, iso3c)

income$income[income$iso3c == "CZE"] <- "High income"
income$income[income$iso3c == "GUF"] <- "High income"
income$income[income$iso3c == 'VNM'] <- 'Lower middle income'



folder <- "xxx/output/visit/covar_resample"

process_ssp_visit_intensity <- function(combined_df) {
    
  pa <- read_csv(file.path(folder, "pa_greater1_nofbcountry.csv"))
  
  visit_id <- read_csv("xxx/output/visit/v4/fishnet_humanvisit.csv") %>%
    dplyr::select(fishnetid, visit_latitude, visit_longitude)
  
  visit_index <- combined_df %>% left_join(visit_id, by = c("visit_latitude", "visit_longitude"))
  
  fishnet_pa <- read_csv(file.path(folder, "fishnet_pa.csv"))
  
  df <- fishnet_pa %>% left_join(visit_index, by = "fishnetid") %>%
    mutate(across(c(sum_visit_time, rural_visit_time, sub_visit_time, urban_visit_time), replace_na, 0))
  
  df <- df %>% mutate(size = cut(
    pa_area,
    breaks = c(1, 10, 20, 30, 40, 50, 100, 1000, 100000, Inf),
    labels = c("1–10", "10–20", "20–30", "30–40", "40–50", "50–100", "100–1,000", "1,000–100,000", ">100,000"),
    right = FALSE
  ))
  
  df$continent <- countrycode(df$FIRST_ISO3, origin = "iso3c", destination = "continent")
  df$continent[df$FIRST_ISO3 == 'CCK'] <- "Oceania"
  df$regions <- countrycode(df$FIRST_ISO3, origin = "iso3c", destination = "region")
  
  df$region <- df$continent
  df$region[df$continent == "Americas" & df$regions == "North America"] <- "North America"
  df$region[df$continent == "Americas" & df$regions == "Latin America & Caribbean"] <- "Latin America & Caribbean"
  
  df <- df %>% left_join(income, by = c('FIRST_ISO3'='iso3c'))
  df$income <- factor(df$income, levels = c("High income", "Upper middle income", 
                                            "Lower middle income", "Low income"))
  
  df_inten <- df %>%
    mutate(
      inten_den_all = sum_visit_time / fishnet_area,
      inten_den_rural = rural_visit_time / fishnet_area,
      inten_den_sub = sub_visit_time / fishnet_area,
      inten_den_urban = urban_visit_time / fishnet_area,
      
      inten_over_all = inten_den_all * overlap_area,
      inten_over_rural = inten_den_rural * overlap_area,
      inten_over_sub = inten_den_sub * overlap_area,
      inten_over_urban = inten_den_urban * overlap_area
    )
  
  df_inten_long <- df_inten %>%
    select(pa_id, pa_area, region, income, size, MIN_IUCN_rank,
           inten_over_all, inten_over_rural, inten_over_sub, inten_over_urban) %>%
    pivot_longer(
      cols = starts_with("inten_over_"),
      names_to = "urban",
      values_to = "inten_over"
    ) %>%
    mutate(
      urban = case_when(
        urban == "inten_over_all" ~ "all",
        urban == "inten_over_rural" ~ "rural",
        urban == "inten_over_sub" ~ "sub",
        urban == "inten_over_urban" ~ "urban"
      )
    )
  
  pa_info <- df_inten %>%
    group_by(pa_id) %>%
    summarise(
      area_pa = first(pa_area),
      region = first(region),
      income = first(income),
      size = first(size),
      IUCN_rank = first(MIN_IUCN_rank),
      .groups = "drop"
    )
  
  calc_intensity_overlap <- function(data, pa_info) {
    intensity <- data %>%
      group_by(pa_id, urban) %>%
      summarise(
        inten_overlap = sum(inten_over, na.rm = TRUE),
        .groups = "drop"
      )
    
    pa_info %>%
      crossing(urban = c('all',"rural", "sub", "urban")) %>%
      left_join(intensity, by = c("pa_id", "urban")) %>%
      mutate(
        inten_overlap = replace_na(inten_overlap, 0),
        intensity_ratio = inten_overlap / area_pa
      )
  }
  
 
  intensity_df <- calc_intensity_overlap(df_inten_long, pa_info)
  
  
  
  income_summary <- intensity_df %>%
      group_by(region, urban) %>%
      summarise(
        total_intensity = sum(inten_overlap, na.rm = TRUE),
        total_area = sum(area_pa, na.rm = TRUE),
        ratio = total_intensity / total_area,
        .groups = "drop"
      )
  income_summary <- income_summary  %>% filter(!is.na(region))
  return(income_summary)
}

combined_df <- read_csv('xxx/output/visit/v4/df_inten_per.csv')
base <- process_ssp_visit_intensity(combined_df)


ssp <- read_csv("xxx/output/visit/v4/ssps_all.csv")
ssp1 <- ssp %>% filter(scenario == 'ssp1')
ssp2 <- ssp %>% filter(scenario == 'ssp2')
ssp3 <- ssp %>% filter(scenario == 'ssp3')
ssp4 <- ssp %>% filter(scenario == 'ssp4')
ssp5 <- ssp %>% filter(scenario == 'ssp5')


process_ssp <- function(df) {
  reshaped <- df %>%
    mutate(urban = case_when(
      urban == 1 ~ "rural_visit_time",
      urban == 2 ~ "sub_visit_time",
      urban == 3 ~ "urban_visit_time"
    )) %>%
    select(visit_latitude, visit_longitude, urban, visit_time) %>%
    pivot_wider(names_from = urban, values_from = visit_time, values_fill = 0)
  
  original_sum <- df %>%
    group_by(visit_latitude, visit_longitude) %>%
    summarise(sum_visit_time = first(sum_visit_time), .groups = "drop")
  
  final <- left_join(original_sum, reshaped, by = c("visit_latitude", "visit_longitude"))
  
  return(final)
}
ssp1 <- process_ssp(ssp1)
ssp2 <- process_ssp(ssp2)
ssp3 <- process_ssp(ssp3)
ssp4 <- process_ssp(ssp4)
ssp5 <- process_ssp(ssp5)

s1 <- process_ssp_visit_intensity(ssp1)
s2 <- process_ssp_visit_intensity(ssp2)
s3 <- process_ssp_visit_intensity(ssp3)
s4 <- process_ssp_visit_intensity(ssp4)
s5 <- process_ssp_visit_intensity(ssp5)


base$scenario <- "base"
s1$scenario <- "ssp1"
s2$scenario <- "ssp2"
s3$scenario <- "ssp3"
s4$scenario <- "ssp4"
s5$scenario <- "ssp5"

all_ssp <- bind_rows(base, s1, s2, s3, s4, s5)

all_table <- all_ssp %>%
  filter(urban == "all") %>%
  select(income, scenario, ratio) %>%
  pivot_wider(names_from = scenario, values_from = ratio)

diff_table <- all_table %>%
  pivot_longer(cols = starts_with("ssp"), names_to = "ssp", values_to = "value") %>%
  mutate(diff = value - base)



all_table <- all_ssp %>%
  filter(urban == "all") %>%
  select(region, scenario, ratio) %>%
  pivot_wider(names_from = scenario, values_from = ratio)

global_table <- all_ssp %>%
  filter(urban == "all") %>%
  group_by(scenario) %>%
  summarise(
    ratio = sum(total_intensity, na.rm = TRUE) / sum(total_area, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  pivot_wider(names_from = scenario, values_from = ratio) %>%
  mutate(region = "Global") %>%
  select(region, everything())  # Make sure region is first



final_table <- bind_rows(global_table, all_table)
diff_table <- final_table %>%
  pivot_longer(cols = starts_with("ssp"), names_to = "ssp", values_to = "value") %>%
  mutate(diff = value - base)


ssp_colors <- c(
  "ssp1" = "#0098CC",  
  "ssp2" = "#1B9E77", 
  "ssp3" = "#FF7F32", 
  "ssp4" = "#8C3FAE",  
  "ssp5" = "#D62828" 
)

diff_region$region <- factor(diff_region$region, levels = c("Global", setdiff(unique(diff_region$region), "Global")))

ggplot(diff_region, aes(x = region, y = diff, fill = ssp)) +
  geom_bar(stat = "identity", position = position_dodge(), width = 0.6) +
  scale_fill_manual(values = ssp_colors) +
  labs(x = "SSP", y = "Difference from base", fill = "region") +
  theme_bw()


diff_income <- read_csv("xxx/output/visit/v4/ssps_income.csv")
diff_income$income <- factor(
  diff_income$income,
  levels = c("High income", "Upper middle income", "Lower middle income", "Low income")
)
ggplot(diff_income, aes(x = income, y = diff, fill = ssp)) +
  geom_bar(stat = "identity", position = position_dodge(), width = 0.6) +
  scale_fill_manual(values = ssp_colors) +
  labs(x = "SSP", y = "Difference from base", fill = "income") +
  theme_bw()


diff_size <- read_csv("xxx/output/visit/v4/ssps_size.csv")
diff_size$size <- factor(
  diff_size$size,
  levels = c(
    "1–10", "10–20", "20–30", "30–40", "40–50",
    "50–100", "100–1,000", "1,000–100,000",  ">100,000"
  ),
  ordered = TRUE
)
ggplot(diff_size, aes(x = size, y = diff, fill = ssp)) +
  geom_bar(stat = "identity", position = position_dodge(), width = 0.6) +
  scale_fill_manual(values = ssp_colors) +
  labs(x = "SSP", y = "Difference from base", fill = "size") +
  theme_bw()



diff_rank <- read_csv("xxx/output/visit/v4/ssps_iucn.csv")

ggplot(diff_rank, aes(x = as.factor(IUCN_rank), y = diff, fill = ssp)) +
  geom_bar(stat = "identity", position = position_dodge(), width = 0.6) +
  scale_fill_manual(values = ssp_colors) +
  labs(x = "SSP", y = "Difference from base", fill = "IUCN_rank") +
  theme_bw()



all_ssp %>%
  filter(urban == "all") %>%
  group_by(scenario) %>%
  summarise(vi = sum(total_intensity, na.rm=TRUE),
            total = sum(total_area, na.rm=TRUE),
            ratio = vi/total)
